<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- xmlns의 값(~/beans)과 xmlns:security의 값(~/security)을 변경 
		 xmlns:security의 prefix를 beans로 변경
 		 => spring security와 관련된 설정에서는 prefix를 달지 않아도 됨
 		 	(원래는 beans가 default로 되어 있어서 prefix를 달지 않아도 되었는데 security로 default를 변경한 것임)
	-->
	
	<!-- Spring Security 관련 설정 파일 -->

	<context:component-scan base-package="com.mugs.security"/>
	
	<!-- Password 암호화 처리 bean -->
	<beans:bean name="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/> <!-- 비밀번호 암호화 -->
	<!-- 사용자가 비밀번호를 잊어버렸을 때 이미 암호화된 비밀번호를 원래 값으로 알려주는 메소드는 없기 때문에 비밀번호를 변경하도록 해야함 -->

	<!-- 
		http 태그 : 웹 인증/권한 체크 처리를 위한 설정을 하는 태그
	 		하위 태그    1. intercept-url : 어떤 url 경로 요청은 어떤 권한이 있어야 하는 지 설정 (경로 - 권한 매칭)
	 							 	      하위 url 경로부터 잡아야 한다.
	 								      속성 - pattern : url 패턴 지정
	 									    access : 권한 지정 (Spring Security EL 표현식 사용 - 681p)
	 								   EL 표현식 : hasRole('권한명') - 하나의 권한 지정 (권한명은 알아서 정하면 됨)
										   	    hasAnyRole('권한명', '권한명' [, ...]) - 여러 개의 권한 지정
											    isAuthenticated() - 인증한(로그인한) 사용자
											    permitAll - 인증/권한이 필요없는 경우
											    EL 표현식 앞에 ! 붙임 = not (ex.!isAuthenricated()=인증하지 않은 사용자)
					2. form-login : 로그인 관련 설정
									속성 - login-page : "로그인폼을 요청하는 url" (로그인안한 사용자가 isAuthenticated()가 필요한 요청(로그인해야 사용가능한 페이지에 접근)을 했을 때 이동할 로그인 폼 페이지)
										 login-processing-url : "로그인 처리를 요청하는 url" (해당 url로 요청이 들어온 경우 로그인 처리)
										 username-parameter : "id로 넘어오는 요청파라미터 이름" (userId 이름으로 넘어오는 값이 id) - <input>태그의 name속성 값과 같아야함
										 password-parameter : "password로 넘어오는 요청파라미터 이름" (userPassword 이름으로 넘어오는 값이 password) - <input>태그의 name속성 값과 같아야함 
										 authentication-failure-url : "로그인 실패시 이동할  url"
										 default-target-url : "로그인 성공시 이동할 url"
					3. logout : 로그아웃 관련 설정
								속성 - logout-url : "로그아웃 처리를 요청하는 url
									 logout-success-url : "로그아웃 성공시 이동할 url"
	 -->		
	<http>
		
		<form-login
				login-page="/login_form.do"
				login-processing-url="/login.do"
				username-parameter="userId"
				password-parameter="userPassword"
				authentication-failure-handler-ref="loginFailHandler"
				default-target-url="/index.do"/>
				<!-- 인증 실패시 단순히 url 이동 : authentication-failure-url="/login_form.do?fail=1" (요청파라미터값으로 에러메세지를 나타낼지 말지 정함)-->
				<!-- 인증 실패시 호출할 bean 지정 (class에서 직접 url 이동하도록함): authentication-failure-handler-ref="loginFailHandler" -->
		<logout
				logout-url="/logout.do"
				logout-success-url="/login_form.do"/>
				
		<!-- 사용자가 자신의 권한이 없는 요청을 한 경우 이동할 url 등록, 등록하지 않으면 403 에러페이지 나타남 (403=권한 없음) -->
		<access-denied-handler error-page="/error/access_denied.do"/>	
	</http>
	
	<!-- 인증(로그인) 처리를 담당할 bean 등록 => AuthenticationProvider -->
	<!-- /login.do url로 요청이 들어온 경우 userAuthenticationProvider 호출 -->
	<authentication-manager>
		<authentication-provider ref="userAuthenticationProvider"/>
	</authentication-manager>
	
</beans:beans>
