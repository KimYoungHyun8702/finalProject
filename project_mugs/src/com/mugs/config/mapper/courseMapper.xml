<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mugs.config.mapper.courseMapper">
	<!-- 전체조회 -->
	<sql id = "select-course-sql">
		SELECT course_id,
			   course_year,
			   course_semester,
			   subject_id,
			   stu_id,
			   pro_id
		FROM   course	   
	</sql>
	
	<!-- 수강 resultmap -->
	<resultMap type="course" id="course-resultmap">
		<id column="course_id" property="courseId"/>
		<result column="course_year" property="courseYear"/>
		<result column="course_semester" property="courseSemester"/>
		<result column="subject_id"	property="subjectId"/>
		<result column="stu_id" property="stuId"/>
		<result column="pro_id" property="proId"/>
	</resultMap>
	
	<resultMap type="course" id="course-subject-resultmap" extends="course-resultmap">
		<association property="subject" resultMap="com.mugs.config.mapper.subjectMapper.subject-basic-resultmap"/>
	</resultMap>

	<resultMap type="course" id="course-count-resultmap">
		<id column="course_id" property="courseId"/>
		<result column="course_year" property="courseYear"/>
		<result column="course_semester" property="courseSemester"/>
		<result column="subject_id"	property="subjectId"/>
		<result column="stu_id" property="stuId"/>
		<result column="count" property="count"/>
	</resultMap>
	
	<resultMap type="course" id="course-subject-major-professor-resultmap" extends="course-resultmap">
		<association property="professor" resultMap="com.mugs.config.mapper.professorMapper.professor-user-resultmap"/>
		<association property="subject" resultMap="com.mugs.config.mapper.subjectMapper.subject-major-resultmap"/>
		<association property="room" resultMap="com.mugs.config.mapper.roomMapper.room-basic-resultmap"/>
		<association property="building" resultMap="com.mugs.config.mapper.buildingMapper.building-basic-resultmap"/>
	</resultMap>
	
	<resultMap type="course" id="course-subject-professor-resultmap" extends="course-resultmap">
		<association property="professor" resultMap="com.mugs.config.mapper.professorMapper.professor-user-resultmap"/>
		<association property="subject" resultMap="com.mugs.config.mapper.subjectMapper.subject-basic-resultmap"/>
	</resultMap>
	
	<resultMap type="course" id="course-professor-subject-resultmap" extends="course-resultmap">
		<association property="professor" javaType="com.mugs.vo.Professor" resultMap="com.mugs.config.mapper.professorMapper.professor-user-resultmap"/>
		<association property="subject" javaType="com.mugs.vo.Subject" resultMap="com.mugs.config.mapper.subjectMapper.subject-basic-resultmap"/>
		<association property="building" javaType="com.mugs.vo.Building" resultMap="com.mugs.config.mapper.buildingMapper.building-basic-resultmap"/>
		<association property="room" javaType="com.mugs.vo.Room" resultMap="com.mugs.config.mapper.roomMapper.room-basic-resultmap"/>
	
	</resultMap>
	
	<!-- 영현이꼬 -->
	<resultMap type="course" id="course-subject-student-users-resultmap" extends="course-count-resultmap">
		<association property="subject" resultMap="com.mugs.config.mapper.subjectMapper.subject-basic-resultmap"/>
		<association property="student" resultMap="com.mugs.config.mapper.studentMapper.student-user-resultmap"/>
	</resultMap>
	
	<!-- 시퀀스 조회 후 수강 id에 저장, 수강 등록 -->
	<insert id="insertCourse" parameterType="course">
		<selectKey order="BEFORE" keyProperty="courseId" resultType="int">
		SELECT COURSE_ID_SEQ.nextval
		FROM dual
		</selectKey>
		INSERT INTO course
		VALUES (
				#{courseId},
				#{courseYear},
				#{courseSemester},
				#{subjectId},
				#{stuId},
				#{proId}	
				)	
	</insert>
	
	<!-- id로 수강변경  -->
	<update id="updateCourseById" parameterType="Course">
	UPDATE course
	SET    course_year = 	 #{courseYear},
		   course_semester = #{courseSemester},
		   subject_id = 	 #{subjectId},
		   stu_id = 		 #{stuId}
	WHERE  course_id=		 #{courseId}
	</update>
	
	<!-- id로 수강삭제 -->
	<delete id="deleteCourseById" parameterType="int">
	DELETE FROM course
	WHERE  course_id=#{courseId}	
	</delete>
	
	<!-- 수강 전체조회 -->
	<select id="selectCourseAll" resultMap="course-resultmap">
		<include refid="select-course-sql"/>
	</select>
	
	<!-- id로 수강조회 -->
	<select id="selectCourseById" parameterType="int" resultMap="course-resultmap">
		<include refid="select-course-sql"/>
		WHERE course_id=#{courseId}
	</select>
	
	<!-- 로그인한 id와 같은 행의 학기, 연도, 과목id, 교수id컬럼을 통해 2중조인하여 과목정보랑 교수정보 조회 -->
	<select id="selectMyTimeTableByJoin" parameterType="map" resultMap="course-professor-subject-resultmap">
		SELECT s.subject_name, s.subject_time, s.lecture_id, u.users_name, b.building_name, r.room_name
		FROM   course c, subject s, professor p, users u, room r, building b
		WHERE  c.subject_id = s.subject_id
		and    s.lecture_id = r.room_id
		and    r.building_id = b.building_id
		AND    c.pro_id = p.pro_id
		AND    p.pro_id = u.users_id
		AND    c.course_year = #{nowYear}
		AND    c.course_semester = #{nowSemester}
		AND    c.stu_id = #{loginId}
	</select>
	

		
	<!-- 내가 현재 수강하고 있는 수강내역을 조회 -->
	<select id="selectMyCourseListByJoin" parameterType="map" resultMap="course-professor-subject-resultmap">
		SELECT s.subject_id, s.subject_name, s.subject_type, s.subject_credit, u.users_name, s.subject_time, s.lecture_id,
            b.building_name, r.room_name
         FROM   subject s, professor p, course c, users u, professor_subject q, room r, building b
         WHERE  c.subject_id = s.subject_id
        and    s.subject_id = q.subject_id    
        and    q.pro_id = p.pro_id
        and    p.pro_id = u.users_id
        and    c.course_year =  q.PRO_SUBJECT_YEAR
         and    c.course_semester = q.PRO_SUBJECT_SEMESTER
         and    s.lecture_id = r.room_id
      and    r.building_id = b.building_id
         AND    c.course_year = #{nowYear}
         AND    c.course_semester = #{nowSemester}
         and    c.stu_id = #{loginId}
	</select>

	
	<!-- By Baek.J.H -->
	<select id="selectStudentCount" parameterType="map" resultType="int">
		select count(stu_id)
		from course
		where course_year=#{nowYear}
		and course_semester=#{semester}
		and subject_id=#{subjectId}
	</select>
	
	<!-- By Baek.J.H -->
	<select id="selectMyCourseList" resultMap="course-subject-major-professor-resultmap" parameterType="map">
		select c.course_id, c.course_year, c.course_semester, c.subject_id, c.stu_id, c.pro_id,
			   s.subject_id, s.subject_name, s.subject_time, s.subject_type, s.subject_credit,
			   s.subject_capacity, s.subject_request, s.subject_grade, s.subject_class, 
			   s.subject_close_class, s.subject_semester, s.major_id, s.lecture_id,
			   u.users_id, u.users_password, u.users_name, u.users_eng_name,
			   u.users_rrn, u.users_email, u.users_phone_num, u.users_cell_num,
			   u.users_national, u.users_current_addr, u.users_born_addr, u.users_enable, u.users_photo,
			   p.pro_id, p.pro_university, p.pro_grad_school, p.pro_office_phone_num, 
			   m.major_id, m.major_name, m.college_id,
			   r.room_id, r.room_name, r.building_id, b.building_id, b.building_name
			   from course c, professor p, users u, subject s, major m, ROOM r, building b
		where c.subject_id = s.subject_id
		and	c.pro_id = p.pro_id
		and p.pro_id = u.users_id
		and s.major_id = m.major_id(+)
		and s.lecture_id = r.room_id
		and r.building_id = b.building_id
		and c.course_year=#{nowYear}
		and c.course_semester=#{semester}
		and c.stu_id=#{stuId}
	</select>
	
	<delete id="deleteCourse" parameterType="map">
		delete from course
		where stu_id=${stuId}
		and course_year=${nowYear}
		and course_semester=#{semester}
		and subject_id=${subjectId}
	</delete>
	
	<!-- 영현이꼬  과목에 맞는 학생 리스트를 조회(매개변수 3개)-->
	<select id="selectCourseByThreeId" resultMap="course-subject-student-users-resultmap">
	   	   select
			   c.course_id,
			   c.course_year,
			   c.course_semester,
			   c.subject_id,
			   c.stu_id,

			   sb.subject_id,
			   sb.subject_name,
			   sb.subject_time,
			   sb.subject_type,
			   sb.subject_credit,
			   sb.subject_capacity,
			   sb.subject_request,
			   sb.subject_grade,
			   sb.subject_class,
			   sb.subject_close_class,
			   sb.subject_semester,
			   sb.major_id,
			   sb.lecture_id,

			   s.stu_id,
			   s.stu_course,
			   s.stu_army,
			   s.stu_admission_date,
			   s.stu_graduation_date,
			   s.stu_register_state,
			   s.stu_student_state,
			   s.stu_grade,
			   s.stu_graduation_exam,
			   s.stu_early_graduation,
			   s.stu_semester,
			   s.major_id,
			   s.major_dual_id,
			   s.major_minor_id,

			   u.users_id, 
			   u.users_password, 
			   u.users_name,
			   u.users_eng_name,
			   u.users_rrn,
			   u.users_email,
			   u.users_phone_num,
			   u.users_cell_num,
			   u.users_national,
			   u.users_current_addr,
			   u.users_born_addr,
			   u.users_enable,
			   u.users_photo,
			   count(c2.stu_id) count
	   from course c, subject sb, student s, users u, course c2
	   where c.stu_id = s.stu_id
	   and s.stu_id = u.users_id
	   and c.subject_id = sb.subject_id
	   and c.course_year = #{courseYear}
	   and c.course_semester = #{courseSemester}
	   and c.subject_id = #{subjectId}
	   and c.stu_id = c2.stu_id(+)
	   and c.subject_id = c2.subject_id(+)
	   group by c.course_id,
			   c.course_year,
			   c.course_semester,
			   c.subject_id,
			   c.stu_id,
			   sb.subject_id,
			   sb.subject_name,
			   sb.subject_time,
			   sb.subject_type,
			   sb.subject_credit,
			   sb.subject_capacity,
			   sb.subject_request,
			   sb.subject_grade,
			   sb.subject_class,
			   sb.subject_close_class,
			   sb.subject_semester,
			   sb.major_id,
			   sb.lecture_id,
			   s.stu_id,
			   s.stu_course,
			   s.stu_army,
			   s.stu_admission_date,
			   s.stu_graduation_date,
			   s.stu_register_state,
			   s.stu_student_state,
			   s.stu_grade,
			   s.stu_graduation_exam,
			   s.stu_early_graduation,
			   s.stu_semester,
			   s.major_id,
			   s.major_dual_id,
			   s.major_minor_id,
			   u.users_id, 
			   u.users_password, 
			   u.users_name,
			   u.users_eng_name,
			   u.users_rrn,
			   u.users_email,
			   u.users_phone_num,
			   u.users_cell_num,
			   u.users_national,
			   u.users_current_addr,
			   u.users_born_addr,
			   u.users_enable,
			   u.users_photo
	
	</select>
	
	
	<!-- 영현이꼬  과목에 맞는 학생 리스트를 조회(매개변수 2개)-->
	<select id="selectCourseByTwoId" resultMap="course-subject-student-users-resultmap">
	   select
			   c.course_id,
			   c.course_year,
			   c.course_semester,
			   c.subject_id,
			   c.stu_id,

			   sb.subject_id,
			   sb.subject_name,
			   sb.subject_time,
			   sb.subject_type,
			   sb.subject_credit,
			   sb.subject_capacity,
			   sb.subject_request,
			   sb.subject_grade,
			   sb.subject_class,
			   sb.subject_close_class,
			   sb.subject_semester,
			   sb.major_id,
			   sb.lecture_id,

			   s.stu_id,
			   s.stu_course,
			   s.stu_army,
			   s.stu_admission_date,
			   s.stu_graduation_date,
			   s.stu_register_state,
			   s.stu_student_state,
			   s.stu_grade,
			   s.stu_graduation_exam,
			   s.stu_early_graduation,
			   s.stu_semester,
			   s.major_id,
			   s.major_dual_id,
			   s.major_minor_id,

			   u.users_id, 
			   u.users_password, 
			   u.users_name,
			   u.users_eng_name,
			   u.users_rrn,
			   u.users_email,
			   u.users_phone_num,
			   u.users_cell_num,
			   u.users_national,
			   u.users_current_addr,
			   u.users_born_addr,
			   u.users_enable,
			   u.users_photo

	   from course c, subject sb, student s, users u
	   where c.stu_id = s.stu_id
	   and s.stu_id = u.users_id
	   and c.subject_id = sb.subject_id
	   and c.subject_id = #{subjectId}
	   and c.stu_id = #{stuId}
	
	</select>
</mapper>